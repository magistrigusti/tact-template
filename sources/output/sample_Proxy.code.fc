#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_Proxy.headers.fc";
#include "sample_Proxy.stdlib.fc";
#include "sample_Proxy.storage.fc";

;;
;; Contract Proxy functions
;;

(slice, int, slice, slice, slice) $Proxy$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver)) = (null(), 0, null(), null(), null());
    $self'owner = $owner;
    return ($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver);
}

((slice, int, slice, slice, slice), ()) $Proxy$_fun_storeStats((slice, int, slice, slice, slice) $self, slice $sender, slice $receiver, slice $message) impure inline_ref {
    var (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver)) = $self;
    $self'count = ($self'count + 1);
    $self'last_sender = $sender;
    $self'last_receiver = $receiver;
    $self'last_message = $message;
    return (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver), ());
}

((slice, int, slice, slice, slice), slice) $Proxy$_fun_owner((slice, int, slice, slice, slice) $self) impure inline_ref {
    var (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver)) = $self;
    return (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver), $self'owner);
}

;;
;; Receivers of a Contract Proxy
;;

((slice, int, slice, slice, slice), ()) $Proxy$_internal_any_text((slice, int, slice, slice, slice) $self, slice $str) impure inline {
    var ($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver) = $self;
    $global_send($SendParameters$_constructor_to_value_mode_body($self'owner, 0, 64, $String$_fun_asComment($str)));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver)~$Proxy$_fun_storeStats($ctx'sender, $self'owner, $str);
    return (($self'owner, $self'count, $self'last_message, $self'last_sender, $self'last_receiver), ());
}

;;
;; Get methods of a Contract Proxy
;;

_ %owner() method_id(83229) {
    var self = $Proxy$_contract_load();
    var res = self~$Proxy$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdZe5b5sPJPPmJpk9EpwnUqtuxsCNdUnYrDRmgknwvVZp";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Proxy
;;

((slice, int, slice, slice, slice), int) $Proxy$_contract_router_internal((slice, int, slice, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        if (slice_bits(in_msg) >= 32) {
            self~$Proxy$_internal_any_text(in_msg.skip_bits(32));
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Proxy$_contract_load();
    
    ;; Handle operation
    int handled = self~$Proxy$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Proxy$_contract_store(self);
}
