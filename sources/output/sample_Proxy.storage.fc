;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Proxy
;;

builder $Proxy$_store(builder build_0, (slice, int, slice, slice, slice) v) inline {
    var (v'owner, v'count, v'last_message, v'last_sender, v'last_receiver) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'count, 257);
    build_0 = ~ null?(v'last_message) ? build_0.store_int(true, 1).store_ref(begin_cell().store_slice(v'last_message).end_cell()) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'last_sender);
    var build_1 = begin_cell();
    build_1 = __tact_store_address_opt(build_1, v'last_receiver);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, slice, slice, slice))) $Proxy$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'count = sc_0~load_int(257);
    var v'last_message = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    var v'last_sender = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'last_receiver = sc_1~__tact_load_address_opt();
    return (sc_0, (v'owner, v'count, v'last_message, v'last_sender, v'last_receiver));
}

(slice, ((slice))) $Proxy$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, int, slice, slice, slice) $Proxy$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Proxy$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$Proxy$init$_load();
        $sc.end_parse();
        return $Proxy$_contract_init(owner);
    }
}

() $Proxy$_contract_store((slice, int, slice, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Proxy$_store(b, v);
    set_data(b.end_cell());
}